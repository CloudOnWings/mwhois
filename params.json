{"name":"mwhois module - v0.1.1b","tagline":"mwhois is a small python whois search module capable of finding multiple available domains via a file or list type. It's a good way to search for domains that are available to buy.","body":"[![Build Status](https://travis-ci.org/jrosco/mwhois.svg?branch=master)](https://travis-ci.org/jrosco/mwhois)\r\n*** \r\n\r\nm-whois is a small python whois search module capable of finding multiple available domains via a file or list type. It's a good way to search for domains that are available to buy. (http://jrosco.github.io/mwhois)\r\n\r\nDependencies\r\n* Python >= 2.7.3 (Python 3 not supported yet) Download from http://www.python.org/download/\r\n* To use the proxy feature you'll need the pysocks module installed. Download from https://pypi.python.org/pypi/PySocks/\r\n\r\nFeatures \r\n* Search for single/multiple domains with direct connection to a large list of  whois servers  \r\n* Show only available domains \r\n* 100+ searchable TLDS\r\n* 30+ gTLDS e.g .graphics, .guru, .technology, .today etc\r\n* Search second whois server if first one fails (limited to certain tld's)\r\n* Connect to whois server via a proxy\r\n\r\nFeatures to come\r\n* TODO: Caching results for quicker responses and avoid exceeding query limits\r\n* TODO: Print results to csv and pdf\r\n\r\nHow to use mwhois python module \r\n---\r\n![](http://www.sbg.bio.ic.ac.uk/phyre2/html/images/infoIcon.gif)Note: In beta, use with caution, criticism welcomed\r\n***\r\nInstall \r\n---- \r\n1. Clone repo(requires git to be installed): <code>git clone https://github.com/jrosco/mwhois.git mwhois </code>\r\n   or\r\n   Download Zip File to the right (https://github.com/jrosco/mwhois/archive/master.zip)\r\n2. If you downloaded zip file (\"unzip mwhois-master.zip\" and \"cd mwhois-master/src\"\r\n3. If you used git clone (\"cd mwhois/\")\r\n4. Now Run: python setup.py install (you'll need correct permissions to install module. For linux use the sudo command)\r\n5. See examples below on how to use this these modules (These are also shown in examples/examples.py)\r\n\r\nExamples \r\n----\r\nSearch for single domain \r\n<code> \r\npython examples/cmd.py github.com \r\n</code>\r\n\r\nSearch for multiple domains using one liner wordlist \r\n<code>\r\npython examples/cmd.py -t com -i files/wordlist-sample\r\n</code>\r\n\r\nYou can also run a sample GUI using the default TkInter module\r\n<code>\r\npython examples/GUI/mgui.py\r\n</code>\r\n\r\nYou can find a mature application built around this module here http://sourceforge.net/projects/xwh0i5/\r\n\r\nUsage\r\n---\r\n<pre>\r\n# \"\"\"Get the whois server url by providing a domain name\"\"\"\r\n# from mwhois.whois import WhoisInfo\r\n#   \r\n# w = WhoisInfo()\r\n# w.domain = \"on.net\"\r\n# whoisserver = w.get_whois_server()\r\n# print(whoisserver)\r\n#   \r\n#   \r\n# \"\"\"Get 'not found' text on whois server by providing a domain name\"\"\"\r\n# from mwhois.whois import WhoisInfo\r\n#  \r\n# w2 = WhoisInfo()\r\n# w2.domain = \"ping.net\"\r\n# w2.get_domain_tld()\r\n# txt = w2.tld_not_found_text()\r\n# print(txt)\r\n#  \r\n# \"\"\"Get 'not found' text on whois server by providing a tld .e.g .com)\"\"\"\r\n# from mwhois.whois import WhoisInfo\r\n#  \r\n# w3 = WhoisInfo()\r\n# w3.tld = \"jp\"\r\n# txt2 = w3.tld_not_found_text()\r\n# print(txt2)\r\n#  \r\n# \"\"\"Single domain search\"\"\"\r\n# from mwhois.whosearch import WhoisSearch\r\n# import mwhois.const as CONST\r\n#\r\n# s = WhoisSearch(dname='iama.ninja', debug=False)\r\n# \"\"\" Enable proxy below by setting s.connection.proxy to True \"\"\"\r\n# s.connection.proxy = False\r\n# s.connection.proxy_host = '127.0.0.1'\r\n# s.connection.proxy_port = 8080\r\n# s.connection.proxy_type = CONST.PROXY_TYPE_SOCKS5\r\n# s.whois_search()\r\n# print(s.response())\r\n# #\r\n# \"\"\"Print Whois attributes returned as a list\"\"\"\r\n# print(s.creation_date())\r\n# print(s.expiry_date())\r\n# print(s.update_date())\r\n# print(s.registrant())\r\n# print(s.nameservers())\r\n# print(s.emails())\r\n#  \r\n# \"\"\" Search for multiple domains \"\"\"\r\n#from mwhois.whosearch import WhoisSearch\r\n#      \r\n#domain_list = ['google','doesnotexist123','yahoo']\r\n#  \r\n# \"\"\" deadonly will only show dead domains if set to true otherwise all domains are shown \"\"\"\r\n#m = WhoisSearch(tld='org',wordlist=domain_list, deadonly=False)\r\n# multi = m.whois_multi_search()\r\n#     \r\n# \"\"\"Returns True(1) if found or False(0) is not found\"\"\"\r\n# for i in multi:\r\n#     print i\r\n#\r\n# \"\"\" Your can also use a file as a wordlist \"\"\"\r\n# from mwhois.whosearch import WhoisSearch\r\n# \r\n# m = WhoisSearch(debug=False)\r\n# m.tld='com'\r\n# m.wordlist='./wordlist.txt'\r\n# \r\n# txt_file = m.whois_multi_search()\r\n# \r\n# \"\"\" Loop over txt_file generator and print list results containing ['status value', 'domain name']\"\"\" \r\n# for x in txt_file:\r\n#      \r\n#     domain = x[1]\r\n#      \r\n#     if x[0] == 1:\r\n#         status = 'taken'\r\n#     else:\r\n#         status = 'not taken'\r\n#      \r\n#     print('Domain %s is %s ' % (domain, status))\r\n#      \r\n# \"\"\" Loop over txt_file generator and print whois attributes\"\"\"\r\n# for x in txt_file:\r\n#     \r\n#     domain = x[1]\r\n#     \r\n#     try: \r\n#         date = m.creation_date()[0]\r\n#     except:\r\n#         date = 'N/A'\r\n#         \r\n#     print('Domain %s has creation date %s' % (domain, date))\r\n</pre>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}